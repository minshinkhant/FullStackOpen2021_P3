{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","services/contacts.js","App.js","index.js"],"names":["Filter","props","value","newFilter","onChange","handleFilterChange","PersonForm","onSubmit","addPerson","newName","handleNameChange","newNumber","handleNumberChange","type","Persons","filterPersons","deleteContact","map","person","index","name","number","onClick","id","baseUrl","contactService","getAll","axios","get","then","response","data","create","newObject","post","update","put","window","confirm","newContacts","delete","location","reload","App","useState","persons","setPersons","setNewName","setNewNumber","setNewFilter","newMessage","setNewMessage","errorMessage","setErrorMessage","useEffect","initialContact","filter","toLowerCase","includes","Notification","message","className","event","target","preventDefault","personsObject","find","item","returnedContact","setTimeout","catch","error","console","log","length","ReactDOM","render","document","getElementById"],"mappings":"mLAgBeA,EAdA,SAACC,GACZ,OACI,mCACI,+BACI,qDACsB,uBAAOC,MAAOD,EAAME,UAClCC,SAAUH,EAAMI,6BCsBzBC,EA5BI,SAACL,GAChB,OACI,mCACI,sBAAMM,SAAUN,EAAMO,UAAtB,SACI,gCACI,kCACI,+BACI,uCACA,6BAAI,uBAAON,MAAOD,EAAMQ,QACpBL,SAAUH,EAAMS,wBAExB,+BACI,yCACA,6BAAI,uBAAOR,MAAOD,EAAMU,UACpBP,SAAUH,EAAMW,0BAExB,+BACI,uBACA,6BAAI,wBAAQC,KAAK,SAAb,gCCIjBC,EAtBC,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,cAAeC,EAAoB,EAApBA,cAC9B,OACI,kCACI,gCACI,+BACI,sCACA,6CAGR,gCACKD,EAAcE,KAAI,SAACC,EAAQC,GAAT,OACf,+BACI,6BAAKD,EAAOE,OACZ,6BAAKF,EAAOG,SACZ,6BAAI,uBAAOR,KAAK,SAASX,MAAM,SAASoB,QAASN,EAAcE,EAAOK,GAAIL,EAAOE,YAH5ED,Y,gBCXvBK,EAAU,qDAmCDC,EAPQ,CACnBC,OA3BW,WAEX,OADgBC,IAAMC,IAAIJ,GACXK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SA0BzCC,OAvBW,SAACC,GAEZ,OADgBN,IAAMO,KAAKV,EAASS,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAsBzCI,OAnBW,SAACZ,EAAIU,GAEhB,OADgBN,IAAMS,IAAN,UAAaZ,EAAb,YAAwBD,GAAMU,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAkBzCf,cAfkB,SAACO,EAAIH,GAAL,OAAc,WAChC,GAAIiB,OAAOC,QAAP,gCAAwClB,IAAS,CACjD,IACMmB,EADUZ,IAAMa,OAAN,UAAgBhB,EAAhB,YAA2BD,IACfM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,QAEtD,OADAM,OAAOI,SAASC,SACTH,EAEX,OAAO,KCyGII,EA7HH,WACV,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOnC,EAAP,KAAgBsC,EAAhB,KACA,EAAkCH,mBAAS,IAA3C,mBAAOjC,EAAP,KAAkBqC,EAAlB,KACA,EAAkCJ,mBAAS,IAA3C,mBAAOzC,EAAP,KAAkB8C,EAAlB,KACA,EAAoCL,mBAAS,MAA7C,mBAAOM,EAAP,KAAmBC,EAAnB,KACA,EAAwCP,mBAAS,MAAjD,mBAAOQ,EAAP,KAAqBC,EAArB,KAoBAC,qBALa,WAEX7B,EAAeC,SAASG,MAAK,SAAA0B,GAAc,OAAKT,EAAWS,QAG7C,IAIhB,IAAMxC,EAAgB8B,EAAQW,QAAO,SAAAtC,GACnC,OAAOA,EAAOE,KAAKqC,cAAcC,SAASvD,EAAUsD,kBA+DhDE,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAGP,qBAAKC,UAAU,QAAf,SACGD,KAKP,OACE,sBAAKC,UAAU,WAAf,UACE,oBAAIA,UAAU,aAAd,uBACA,cAACF,EAAD,CAAcC,QAASV,IACvB,cAACS,EAAD,CAAcC,QAASR,IACvB,cAAC,EAAD,CAAQjD,UAAWA,EACjBE,mBA/FqB,SAACyD,GAC1Bb,EAAaa,EAAMC,OAAO7D,UAgGxB,oBAAI2D,UAAU,aAAd,+BACA,cAAC,EAAD,CAAYrD,UA/EE,SAACsD,GACjBA,EAAME,iBACN,IAAMC,EAAgB,CACpB7C,KAAMX,EACNY,OAAQV,GAGNkC,EAAQqB,MAAK,SAACC,GAAD,OAAUA,EAAK/C,OAAS6C,EAAc7C,QAEjDiB,OAAOC,QAAP,UAAkB7B,EAAlB,uFAGFwD,EAAc1C,GAAKsB,EAAQqB,MAAK,SAACC,GAAD,OAAUA,EAAK/C,OAAS6C,EAAc7C,QAAMG,GAC5EE,EAAeU,OAAO8B,EAAc1C,GAAI0C,GACrCpC,MAAK,SAACuC,GACLrB,EAAW,IACXC,EAAa,IACbG,EAAc,WAAD,OACAiB,EAAgBhD,OAE7BiD,YAAW,WACTlB,EAAc,MACdd,OAAOI,SAASC,WAChB,QACD4B,OAAM,SAAAC,GACPlB,EAAgB,kBAAD,OACKY,EAAc7C,KADnB,0DAIfoD,QAAQC,IAAIF,GACZF,YAAW,WACThB,EAAgB,MAChBhB,OAAOI,SAASC,WACf,UAOTuB,EAAc1C,GAAKsB,EAAQ6B,OAAS,EAEpCjD,EAAeO,OAAOiC,GACnBpC,MAAK,SAAAuC,GACJtB,EAAWsB,GACXrB,EAAW,IACXC,EAAa,IACbG,EAAc,SAAD,OACFc,EAAc7C,OAEzBiD,YAAW,WACTlB,EAAc,QACd,UA4BJ1C,QAASA,EAASC,iBA3GC,SAACoD,GACxBf,EAAWe,EAAMC,OAAO7D,QA2GpBS,UAAWA,EAAWC,mBAxGD,SAACkD,GAC1Bd,EAAac,EAAMC,OAAO7D,UAyGxB,oBAAI2D,UAAU,aAAd,sBACA,cAAC,EAAD,CAAS9C,cAAeA,EAAeC,cAAeS,EAAeT,oBCzH3E2D,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.af1c0ac8.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = (props) => {\n    return (\n        <>\n            <form>\n                <div>\n                    filter shown with <input value={props.newFilter}\n                        onChange={props.handleFilterChange}>\n                    </input>\n                </div>\n            </form>\n        </>\n    )\n}\n\nexport default Filter;","import React from 'react'\n\nconst PersonForm = (props) => {\n    return (\n        <>\n            <form onSubmit={props.addPerson}>\n                <table>\n                    <tbody>\n                        <tr>\n                            <td>name:</td>\n                            <td><input value={props.newName}\n                                onChange={props.handleNameChange} /></td>\n                        </tr>\n                        <tr>\n                            <td>number:</td>\n                            <td><input value={props.newNumber}\n                                onChange={props.handleNumberChange} /></td>\n                        </tr>\n                        <tr>\n                            <td></td>\n                            <td><button type=\"submit\">add</button></td>\n                        </tr>\n                    </tbody>\n                </table>\n\n            </form>\n        </>\n    )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Persons = ({ filterPersons, deleteContact }) => {\n    return (\n        <table>\n            <thead>\n                <tr>\n                    <th>Name</th>\n                    <th>Number</th>\n                </tr>\n            </thead>\n            <tbody>\n                {filterPersons.map((person, index) =>\n                    <tr key={index}>\n                        <td>{person.name}</td>\n                        <td>{person.number}</td>\n                        <td><input type=\"button\" value=\"delete\" onClick={deleteContact(person.id, person.name)} /></td>\n                    </tr>\n                )}\n            </tbody>\n        </table>\n    )\n}\n\nexport default Persons","import axios from 'axios'\n\nconst baseUrl = 'https://fso2021-3-9-3-11.herokuapp.com/api/persons';\n\nconst getAll = () => {\n    const request = axios.get(baseUrl);\n    return request.then(response => response.data);\n}\n\nconst create = (newObject) => {\n    const request = axios.post(baseUrl, newObject);\n    return request.then(response => response.data);\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\n    return request.then(response => response.data);\n}\n\nconst deleteContact = (id, name) => () => {\n    if (window.confirm(`Do you want to delete ${name}`)) {\n        const request = axios.delete(`${baseUrl}/${id}`);\n        const newContacts = request.then(response => response.data);\n        window.location.reload();\n        return newContacts;\n    }\n    return false;\n\n}\n\nconst contactService = {\n    getAll: getAll,\n    create: create,\n    update: update,\n    deleteContact: deleteContact\n}\n\nexport default contactService;","import React, { useState, useEffect } from 'react';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport contactService from './services/contacts';\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newFilter, setNewFilter] = useState('')\n  const [newMessage, setNewMessage] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value)\n  }\n\n  //using react hooks to fetch data from server 3001\n  const hook = () => {\n    //console.log('effect');\n    contactService.getAll().then(initialContact => (setPersons(initialContact)));\n  }\n\n  useEffect(hook, []);\n  //console.log(\"render\", persons.length, \"persons\");\n\n  //search contact with the filter name\n  const filterPersons = persons.filter(person => {\n    return person.name.toLowerCase().includes(newFilter.toLowerCase());\n  })\n\n  //adding new contact to the phone book\n  const addPerson = (event) => {\n    event.preventDefault();\n    const personsObject = {\n      name: newName,\n      number: newNumber,\n    };\n    //check the contact is already in the phonebook\n    if (persons.find((item) => item.name === personsObject.name)) {\n      //confirm to replace old contact with new contact\n      if (window.confirm(`${newName} is already added to phonebook, \n      replace the old number with the new one?`)) {\n        //find the id of old contact and add id to the updated contact\n        personsObject.id = persons.find((item) => item.name === personsObject.name).id;\n        contactService.update(personsObject.id, personsObject)\n          .then((returnedContact) => {\n            setNewName(\"\");\n            setNewNumber(\"\");\n            setNewMessage(\n              `Updated ${returnedContact.name}`\n            )\n            setTimeout(() => {\n              setNewMessage(null);\n              window.location.reload();\n            },5000)\n          }).catch(error => {\n            setErrorMessage(\n              `Information of ${personsObject.name} has already \n              been removed from server`\n            )\n            console.log(error)\n            setTimeout(() => {\n              setErrorMessage(null);\n              window.location.reload();\n            }, 3000)\n          })\n      }\n    }\n    //if not, adding contact to the backend server\n    else {\n      //adding id for the new contact\n      personsObject.id = persons.length + 1;\n      //create new contact with contactService\n      contactService.create(personsObject)\n        .then(returnedContact => {\n          setPersons(returnedContact);\n          setNewName(\"\");\n          setNewNumber(\"\");\n          setNewMessage(\n            `Added ${personsObject.name}`\n          )\n          setTimeout(() => {\n            setNewMessage(null);\n          },5000)\n        })\n    }\n\n  }\n\n  //notification when new contact added\n  const Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"main_div\">\n      <h1 className=\"header_div\">Phonebook</h1>\n      <Notification message={newMessage} />\n      <Notification message={errorMessage} />\n      <Filter newFilter={newFilter}\n        handleFilterChange={handleFilterChange} />\n\n      <h2 className=\"header_div\">Add a new contact</h2>\n      <PersonForm addPerson={addPerson}\n        newName={newName} handleNameChange={handleNameChange}\n        newNumber={newNumber} handleNumberChange={handleNumberChange} />\n\n      <h2 className=\"header_div\">Contacts</h2>\n      <Persons filterPersons={filterPersons} deleteContact={contactService.deleteContact} />\n\n    </div>\n  )\n}\n\nexport default App\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}